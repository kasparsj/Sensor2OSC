// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pftp_error.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///
/// Error codes.
public enum Protocol_PbPFtpError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Succeeding or no error 
  case operationSucceeded // = 0
  case rebooting // = 1
  case tryAgain // = 2

  /// Host errors 
  case unidentifiedHostError // = 100
  case invalidCommand // = 101
  case invalidParameter // = 102
  case noSuchFileOrDirectory // = 103
  case directoryExists // = 104
  case fileExists // = 105
  case operationNotPermitted // = 106
  case noSuchUser // = 107
  case timeout // = 108

  /// Device errors 
  case unidentifiedDeviceError // = 200
  case notImplemented // = 201
  case systemBusy // = 202
  case invalidContent // = 203
  case checksumFailure // = 204
  case diskFull // = 205
  case prerequisiteNotMet // = 206
  case insufficientBuffer // = 207
  case waitForIdling // = 208

  /// 300-399 reserved for communication interface specific errors 
  case batteryTooLow // = 209

  public init() {
    self = .operationSucceeded
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .operationSucceeded
    case 1: self = .rebooting
    case 2: self = .tryAgain
    case 100: self = .unidentifiedHostError
    case 101: self = .invalidCommand
    case 102: self = .invalidParameter
    case 103: self = .noSuchFileOrDirectory
    case 104: self = .directoryExists
    case 105: self = .fileExists
    case 106: self = .operationNotPermitted
    case 107: self = .noSuchUser
    case 108: self = .timeout
    case 200: self = .unidentifiedDeviceError
    case 201: self = .notImplemented
    case 202: self = .systemBusy
    case 203: self = .invalidContent
    case 204: self = .checksumFailure
    case 205: self = .diskFull
    case 206: self = .prerequisiteNotMet
    case 207: self = .insufficientBuffer
    case 208: self = .waitForIdling
    case 209: self = .batteryTooLow
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .operationSucceeded: return 0
    case .rebooting: return 1
    case .tryAgain: return 2
    case .unidentifiedHostError: return 100
    case .invalidCommand: return 101
    case .invalidParameter: return 102
    case .noSuchFileOrDirectory: return 103
    case .directoryExists: return 104
    case .fileExists: return 105
    case .operationNotPermitted: return 106
    case .noSuchUser: return 107
    case .timeout: return 108
    case .unidentifiedDeviceError: return 200
    case .notImplemented: return 201
    case .systemBusy: return 202
    case .invalidContent: return 203
    case .checksumFailure: return 204
    case .diskFull: return 205
    case .prerequisiteNotMet: return 206
    case .insufficientBuffer: return 207
    case .waitForIdling: return 208
    case .batteryTooLow: return 209
    }
  }

}

#if swift(>=4.2)

extension Protocol_PbPFtpError: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Protocol_PbPFtpError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPERATION_SUCCEEDED"),
    1: .same(proto: "REBOOTING"),
    2: .same(proto: "TRY_AGAIN"),
    100: .same(proto: "UNIDENTIFIED_HOST_ERROR"),
    101: .same(proto: "INVALID_COMMAND"),
    102: .same(proto: "INVALID_PARAMETER"),
    103: .same(proto: "NO_SUCH_FILE_OR_DIRECTORY"),
    104: .same(proto: "DIRECTORY_EXISTS"),
    105: .same(proto: "FILE_EXISTS"),
    106: .same(proto: "OPERATION_NOT_PERMITTED"),
    107: .same(proto: "NO_SUCH_USER"),
    108: .same(proto: "TIMEOUT"),
    200: .same(proto: "UNIDENTIFIED_DEVICE_ERROR"),
    201: .same(proto: "NOT_IMPLEMENTED"),
    202: .same(proto: "SYSTEM_BUSY"),
    203: .same(proto: "INVALID_CONTENT"),
    204: .same(proto: "CHECKSUM_FAILURE"),
    205: .same(proto: "DISK_FULL"),
    206: .same(proto: "PREREQUISITE_NOT_MET"),
    207: .same(proto: "INSUFFICIENT_BUFFER"),
    208: .same(proto: "WAIT_FOR_IDLING"),
    209: .same(proto: "BATTERY_TOO_LOW"),
  ]
}
