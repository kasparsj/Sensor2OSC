// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: exercise_rr_samples.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// RR.BPB=PbExerciseRRIntervals

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Data_PbRROffline {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Start time / offset from the beginning of the exercise
  public var startTime: PbDuration {
    get {return _startTime ?? PbDuration()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// Duration of the offline period
  public var timeInterval: PbDuration {
    get {return _timeInterval ?? PbDuration()}
    set {_timeInterval = newValue}
  }
  /// Returns true if `timeInterval` has been explicitly set.
  public var hasTimeInterval: Bool {return self._timeInterval != nil}
  /// Clears the value of `timeInterval`. Subsequent reads from it will return its default value.
  public mutating func clearTimeInterval() {self._timeInterval = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTime: PbDuration? = nil
  fileprivate var _timeInterval: PbDuration? = nil
}

///
///RR intervals of the exercise.
///! All fields are required.
public struct Data_PbExerciseRRIntervals {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// rr intervals in milliseconds
  public var rrIntervals: [UInt32] = []

  /// Contains information about periods when there has not been a connection to a rr interval sensor
  /// rr_intervals fields will be always written into the file and offline fields are additional
  /// information for marking periods as offline periods
  public var rrSensorOffline: [Data_PbRROffline] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "data"

extension Data_PbRROffline: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PbRROffline"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_time"),
    2: .standard(proto: "time_interval"),
  ]

  public var isInitialized: Bool {
    if self._startTime == nil {return false}
    if self._timeInterval == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._timeInterval) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._timeInterval {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Data_PbRROffline, rhs: Data_PbRROffline) -> Bool {
    if lhs._startTime != rhs._startTime {return false}
    if lhs._timeInterval != rhs._timeInterval {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Data_PbExerciseRRIntervals: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PbExerciseRRIntervals"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rr_intervals"),
    2: .standard(proto: "rr_sensor_offline"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.rrSensorOffline) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedUInt32Field(value: &self.rrIntervals) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.rrSensorOffline) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rrIntervals.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.rrIntervals, fieldNumber: 1)
    }
    if !self.rrSensorOffline.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rrSensorOffline, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Data_PbExerciseRRIntervals, rhs: Data_PbExerciseRRIntervals) -> Bool {
    if lhs.rrIntervals != rhs.rrIntervals {return false}
    if lhs.rrSensorOffline != rhs.rrSensorOffline {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
